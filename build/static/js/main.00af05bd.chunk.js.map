{"version":3,"sources":["components/ProductItem.js","components/AddProduct.js","components/App.js","serviceWorker.js","index.js"],"names":["ProductItem","props","state","isEdit","onEdit","bind","onEditSubmit","onDelete","this","setState","event","preventDefault","nameInput","value","priceInput","name","price","id","colSpan","onSubmit","className","placeholder","ref","defaultValue","scope","onClick","Component","AddProduct","onAdd","localStorage","setItem","JSON","stringify","App","products","parse","getItem","getProducts","push","originalName","map","product","filteredProducts","filter","i","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.00af05bd.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass ProductItem extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isEdit: false\n    }\n\n    this.onEdit = this.onEdit.bind(this);\n    this.onEditSubmit = this.onEditSubmit.bind(this);\n    this.onDelete = this.onDelete.bind(this);\n  }\n\n  onEdit() {\n    this.setState({ isEdit: true })\n  }\n\n  onEditSubmit(event) {\n    event.preventDefault();\n\n    this.props.onEditSubmit(this.nameInput.value, this.priceInput.value, this.props.name);\n\n    this.setState({ isEdit: false })\n  }\n\n  onDelete() {\n    const {onDelete, name} = this.props;\n\n    onDelete(name);\n  }\n\n  render() {\n    const { name, price, id } = this.props;\n\n    return (\n      <tbody>\n        {\n          this.state.isEdit\n            ? (\n              <tr>\n                <td colSpan=\"4\">\n                  <form onSubmit={this.onEditSubmit} className=\"form-inline justify-content-center\">\n                    <input className=\"form-control\" placeholder=\"Name\" ref={nameInput => this.nameInput = nameInput} defaultValue={name}/>\n                    \n                    <input className=\"form-control\" placeholder=\"Price\" ref={priceInput => this.priceInput = priceInput} defaultValue={price}/>\n                    \n                    <button className=\"btn btn-success\">Save</button>\n                  </form>\n                </td>\n              </tr>\n            )\n            : (\n              <tr>\n                <th scope=\"row\">{id}</th>\n                <td>{name}</td>\n                <td>{price}</td>\n                <td>\n                  <button onClick={this.onEdit} className=\"btn btn-warning mr-2\">Edit</button>\n\n                  <button onClick={this.onDelete} className=\"btn btn-danger\">Delete</button>\n                </td>\n              </tr>\n            )\n        }\n      </tbody>\n    );\n  }\n}\n\nexport default ProductItem;\n","import React, { Component } from 'react';\n\nclass AddProduct extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onSubmit(event) {\n  \tevent.preventDefault();\n\n  \tthis.props.onAdd(this.nameInput.value, this.priceInput.value)\n\n  \tthis.nameInput.value = '';\n  \tthis.priceInput.value = '';\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit}>\n        <h3>Add product</h3>\n\n        <div className=\"form-group\">\n          <input className=\"form-control\" placeholder=\"Name\" ref={nameInput => this.nameInput = nameInput}/>\n        </div>\n        \n        <div className=\"form-group\">\n          <input className=\"form-control\" placeholder=\"Price\" ref={priceInput => this.priceInput = priceInput}/>\n        </div>\n\n        <div className=\"form-group\">\n          <button className=\"btn btn-success btn-block\">Add</button>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default AddProduct;\n","import React, { Component } from 'react';\nimport ProductItem from './ProductItem';\nimport AddProduct from './AddProduct';\nimport './css/App.css';\n\nconst products = [\n  {\n    name: 'Product Name 1',\n    price: '200'\n  },\n  {\n    name: 'Product Name 2',\n    price: '650'\n  }\n];\n\nlocalStorage.setItem('products', JSON.stringify(products));\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      products: JSON.parse(localStorage.getItem('products'))\n    }\n\n    this.onAdd = this.onAdd.bind(this);\n    this.onDelete = this.onDelete.bind(this);\n    this.onEditSubmit = this.onEditSubmit.bind(this);\n  }\n\n  componentWillMount() {\n    const products = this.getProducts();\n\n    this.setState({products});\n  }\n\n  getProducts() {\n    return this.state.products;\n  }\n\n  onAdd(name, price) {\n    const products = this.getProducts();\n\n    products.push({name, price});\n\n    this.setState({products});\n  }\n\n  onEditSubmit(name, price, originalName) {\n    let products = this.getProducts();\n\n    products = products.map(product => {\n      if( product.name === originalName ){\n        product.name = name;\n        product.price = price;\n      }\n\n      return product;\n    })\n\n    this.setState({products});\n  }\n\n  onDelete(name) {\n    const products = this.getProducts();\n    \n    const filteredProducts = products.filter(product => {\n      return product.name !== name;\n    })\n\n    this.setState({ products: filteredProducts });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"my-5\">Products manager</h1>\n\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-4\">\n              <AddProduct\n                onAdd = {this.onAdd}\n              />\n            </div>\n\n            <div className=\"col-md-8 mt-4 mt-md-0\">\n              <table className=\"table\">\n                <thead className=\"thead-dark\">\n                  <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">Name</th>\n                    <th scope=\"col\">Price</th>\n                    <th scope=\"col\">Actions</th>\n                  </tr>\n                </thead>\n                  {\n                    this.state.products.map((product, i) => {\n                      return (                        \n                        <ProductItem\n                          key = {i+1}\n                          id = {i+1}\n                          {...product}\n                          onDelete={this.onDelete}\n                          onEditSubmit={this.onEditSubmit}\n                        />    \n                      )\n                    })\n                  }\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}